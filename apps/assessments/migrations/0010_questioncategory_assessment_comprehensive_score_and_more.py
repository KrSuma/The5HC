# Generated by Django 5.0.1 on 2025-06-19 03:31

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('assessments', '0009_create_test_standard_model'),
    ]

    operations = [
        migrations.CreateModel(
            name='QuestionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('name_ko', models.CharField(help_text='Korean name', max_length=100)),
                ('description', models.TextField(blank=True)),
                ('description_ko', models.TextField(blank=True, help_text='Korean description')),
                ('weight', models.DecimalField(decimal_places=2, default=1.0, help_text='Weight factor for scoring (0.0-1.0)', max_digits=3, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('order', models.IntegerField(default=0, help_text='Display order')),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Question Categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.AddField(
            model_name='assessment',
            name='comprehensive_score',
            field=models.FloatField(blank=True, help_text='Comprehensive score combining physical and MCQ assessments', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='assessment',
            name='knowledge_score',
            field=models.FloatField(blank=True, help_text='Knowledge assessment score (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='assessment',
            name='lifestyle_score',
            field=models.FloatField(blank=True, help_text='Lifestyle assessment score (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='assessment',
            name='readiness_score',
            field=models.FloatField(blank=True, help_text='Readiness assessment score (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.CreateModel(
            name='MultipleChoiceQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('question_text_ko', models.TextField(help_text='Korean translation')),
                ('question_type', models.CharField(choices=[('single', 'Single Choice'), ('multiple', 'Multiple Choice'), ('scale', 'Scale/Rating')], default='single', max_length=20)),
                ('points', models.IntegerField(default=1, help_text='Maximum points for this question')),
                ('is_required', models.BooleanField(default=True)),
                ('help_text', models.TextField(blank=True)),
                ('help_text_ko', models.TextField(blank=True, help_text='Korean help text')),
                ('order', models.IntegerField(default=0, help_text='Display order within category')),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('depends_on', models.ForeignKey(blank=True, help_text='Show this question only if another question is answered', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dependent_questions', to='assessments.multiplechoicequestion')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='assessments.questioncategory')),
            ],
            options={
                'ordering': ['category', 'order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='QuestionChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_text', models.CharField(max_length=200)),
                ('choice_text_ko', models.CharField(help_text='Korean translation', max_length=200)),
                ('points', models.IntegerField(default=0, help_text='Points awarded for this choice')),
                ('is_correct', models.BooleanField(default=False, help_text='For knowledge questions - is this the correct answer?')),
                ('order', models.IntegerField(default=0, help_text='Display order')),
                ('contributes_to_risk', models.BooleanField(default=False, help_text='Does this choice indicate increased injury risk?')),
                ('risk_weight', models.DecimalField(decimal_places=2, default=0.0, help_text='How much this choice contributes to risk (0.0-1.0)', max_digits=3, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='assessments.multiplechoicequestion')),
            ],
            options={
                'ordering': ['order', 'id'],
            },
        ),
        migrations.AddField(
            model_name='multiplechoicequestion',
            name='depends_on_answer',
            field=models.ForeignKey(blank=True, help_text='Show this question only if this specific answer is selected', null=True, on_delete=django.db.models.deletion.SET_NULL, to='assessments.questionchoice'),
        ),
        migrations.CreateModel(
            name='QuestionResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response_text', models.TextField(blank=True, help_text='For open-ended follow-ups or additional comments')),
                ('points_earned', models.IntegerField(default=0, help_text='Total points earned for this question')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_responses', to='assessments.assessment')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessments.multiplechoicequestion')),
                ('selected_choices', models.ManyToManyField(related_name='responses', to='assessments.questionchoice')),
            ],
            options={
                'ordering': ['question__category__order', 'question__order'],
                'unique_together': {('assessment', 'question')},
            },
        ),
    ]
