# Generated by Django 5.0.1 on 2025-06-14 08:58

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the fitness organization or gym', max_length=100, verbose_name='Organization Name')),
                ('slug', models.SlugField(help_text='Unique identifier for URLs', max_length=100, unique=True, verbose_name='URL Slug')),
                ('description', models.TextField(blank=True, help_text='Brief description of the organization', verbose_name='Description')),
                ('phone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format: "+999999999". Up to 15 digits allowed.', regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('email', models.EmailField(blank=True, help_text='Primary contact email for the organization', max_length=254, verbose_name='Contact Email')),
                ('address', models.TextField(blank=True, help_text='Physical address of the organization', verbose_name='Address')),
                ('business_hours', models.JSONField(blank=True, default=dict, help_text='Operating hours for each day of the week', verbose_name='Business Hours')),
                ('timezone', models.CharField(default='Asia/Seoul', help_text='Timezone for the organization', max_length=50, verbose_name='Timezone')),
                ('max_trainers', models.IntegerField(default=5, help_text='Maximum number of trainers allowed in this organization', verbose_name='Maximum Trainers')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TrainerInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text='Email address to send the invitation to', max_length=254, verbose_name='Email')),
                ('first_name', models.CharField(blank=True, max_length=50, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=50, verbose_name='Last Name')),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('senior', 'Senior Trainer'), ('trainer', 'Trainer'), ('assistant', 'Assistant')], default='trainer', max_length=20, verbose_name='Intended Role')),
                ('invitation_code', models.CharField(help_text='Unique code for accepting the invitation', max_length=100, unique=True, verbose_name='Invitation Code')),
                ('message', models.TextField(blank=True, help_text='Optional message to include with the invitation', verbose_name='Personal Message')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('expired', 'Expired')], default='pending', max_length=20, verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('expires_at', models.DateTimeField(help_text='When this invitation expires', verbose_name='Expires At')),
                ('accepted_at', models.DateTimeField(blank=True, null=True, verbose_name='Accepted At')),
                ('invited_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_invitations', to=settings.AUTH_USER_MODEL, verbose_name='Invited By')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='trainers.organization', verbose_name='Organization')),
            ],
            options={
                'verbose_name': 'Trainer Invitation',
                'verbose_name_plural': 'Trainer Invitations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Trainer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text='Brief introduction about the trainer', verbose_name='Biography')),
                ('profile_photo', models.ImageField(blank=True, help_text='Professional photo of the trainer', null=True, upload_to='trainers/photos/', verbose_name='Profile Photo')),
                ('certifications', models.JSONField(blank=True, default=list, help_text='List of professional certifications', verbose_name='Certifications')),
                ('specialties', models.JSONField(blank=True, default=list, help_text='Areas of expertise (e.g., weight loss, strength training)', verbose_name='Specialties')),
                ('years_of_experience', models.IntegerField(default=0, help_text='Years of professional experience', verbose_name='Years of Experience')),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('senior', 'Senior Trainer'), ('trainer', 'Trainer'), ('assistant', 'Assistant')], default='trainer', help_text='Role within the organization', max_length=20, verbose_name='Role')),
                ('session_price', models.IntegerField(default=50000, help_text='Default price per session in Korean Won', verbose_name='Default Session Price')),
                ('availability_schedule', models.JSONField(blank=True, default=dict, help_text='Weekly availability schedule', verbose_name='Availability Schedule')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this trainer is currently active', verbose_name='Active')),
                ('deactivated_at', models.DateTimeField(blank=True, help_text='When the trainer was deactivated', null=True, verbose_name='Deactivated At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('organization', models.ForeignKey(blank=True, help_text='The organization this trainer belongs to', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='trainers', to='trainers.organization', verbose_name='Organization')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='trainer_profile', to=settings.AUTH_USER_MODEL, verbose_name='User Account')),
            ],
            options={
                'verbose_name': 'Trainer',
                'verbose_name_plural': 'Trainers',
                'ordering': ['organization', 'user__first_name', 'user__last_name'],
                'unique_together': {('user', 'organization')},
            },
        ),
    ]
